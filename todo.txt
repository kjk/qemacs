Things to do, my version:
 * feature: typing over selection should replace it
 * feature: proper selection tracking
 * feature: proper font support (currently only one, default, font is used for windows code)
 * feature: windows-style keybindings, separate keybindings from code so that they can be loaded from a text file
 * feature: persist settings in a file, using json-c library or some other way
 * feature: implement redo
 * feature: ability to underline with squiggly lines (using a style); needed for spell-checking
 * feature: inline spell-checking
 * feature: make page up/page down work as expected
 * feature: implement drag&drop copy
 * feature: detect that a file has changed and ask for re-load
 * feature: default tab should be 4 and using spaces for tabs
 * feature: show line numbers in a better way e.g. use subtler 
   color, smaller font and limit the number of characters for the numer based
   on the file size
 * feature: show whitespace (tab, eol)
 * feature: improve win clipboard handling (win32_selection_request, 
   win32_selection_activate) to handle CF_UNICODE and do proper conversion to the 
   buffer format
 * feature: lua, python, mzscheme, hedghehog bindings
 * feature: ability to change font (set-font command)
 * feature: multiple windows
 * feature: tabbed windows (or some other way for switching between buffers)
 * feature: add a file browser in a separate window to replace dired
 * feature: an alternative way for switching between buffers
 * feature: hard word-wrap (auto-fill?)
 * feature: add shell mode
 * feature: add tty mode (?)
 * feature: add video mode (?)
 * feature: add makefile mode
 * feature: add python mode
 * feature: make it more windows'y by getting rid of mode line (or make it an option)
 * feature: add generic syntax highlighting mode (that uses syntax files from some other editor)
 * feature: ability to run a script on a file and dump the results to a new buffer
 * feature: better colors
 * feature: read-only direct open of *lit files, DOC *pdb files etc.
 * feature: infinite, persisted history of opened files
 * feature: project management (project is a set of files). Create/delete/modify projects. Search through all files in a given project.
 * feature: add docbook mode
 * bug: html mode crash on C:\kjk\src\mine\web\arslexis\www\aboutus.html (rendering a table)
 * feature: drag-drop of urls: when an URL is drag&dropped (from e.g. a web browser) it gets downloaded via http. The buffer name is based on the basename of the url
 * feature: implement http-load where a file gets loaded from a url. It'll be 
   considered a new file (no filename assigned) but with a buffer name of the
   last part.
 * feature: detect a line-ending setting (DOS, MAC, Unix) and display it in status line.
 * feature: anticipatory completion (http://lemonodor.com/archives/001269.html)
 * feature: nsis windows installer
 * feature: a windows icon
 * feature: improve handling for 0xd 0xa newline handling. I supressed 
   displaying of ^M but 0xd (13) is still there and behaves like an invisible 
   character, which is confusing to the user. On del it should eat both 0xa and 
   0xd. On left/right it should skip both 0xa and 0xd.
 * feature: menu and/or some other way of doing gui commands
 * feature: remember currently edited documents in config file. On start reload 
   plus the file specified on command line.
 * feature: exit dired mode after drag&drop
 * bug: asserts cause infinite looping in WM_PAINT, stack overflow and
   silent exit from the app
 * bug: switching to hex mode got it confused

List from writely, needs to be cleaned up:
 * fix makefile to automatically generate html_style.obj
 * redraw the screen on WM_ACTIVATE (?)
 * add QE_BUTTON_PRESS_EVENT, QE_BUTTON_RELEASE_EVENT,  QE_MOTION_EVENT for win
 * fix autocomplete for win
 * implement windows-style selection (cursor keys with shift)
 * autocomplete with the content of current buffer
 * drag&drop of files for win
 * kill the mode line
 * add tabs
 * no need to save the files, ever
 * ability to change the font at runtime
 * save preferences to a file
 * add line numbers
 * fix word-wrapping
 * load files from command line
 * tabs or some other form of switching between buffers
 * lua or python or ruby embedding
 * ability to run a script on a file and pipe the results to a new window
 * fix warnings
 * show left margin
 * select better colors
 * show special characters (tabs, spaces)
 * read-only direct open of *lit files (and Palm's DOC *pdbs etc.)
 * ability to open a file and dump its info to a separate window
 * infinite history of opened files
 * ability to create projects (easily)

Maybe later:
 * feature: a callback-based json deserializer
* feature: a 'task list' mode where we display the list of current processes 
and allow killing them (e.g. with CTRL-X K).

Done:
 * feature: CTRL-X should be cut. Need to find a replacement for CTRL-X prefix 
   command.
* feature: implement file mmap for windows (map_buffer in buffer.c)
* [2005-10-31]  feature: implement mouse-wheel handling
* [2005-10-30] feature: don't display '^M' (which is what is displayed for 0xd 0xa sequence which is, I belive, DOS line termination). Should be an option to suppress displaying ^M, on by default.
* [2005-10-30] feature: implement windows-style selection and copy & paste
* [2005-10-30] feature: backups to a separate directory (an alternative to saving as foo~, switchable via preference setting, by default use separate directory)
* [2005-10-29] feature: (low) compact json-c library into just 2 files. Shorten the naming 
from json_* to just json_*. See if API could be improved.
* [2005-10-29] bug: '}' in c-mode works funny
* [2005-10-29] bug: re-enable dired
* [2005-10-28] bug: fix multiple refresh after resize by not queuing duplicate expose messages
* [2005-10-28] bug: re-enable canonize_path for Windows
* [2005-10-28] bug: re-enable file completion
* [2005-10-28] bug: fix all compiler warnings
* [2005-10-28] bug: font refcounting seem to be busted
* [2005-10-28] feature: add *log* buffer which would contain internal logging information (for easier debugging of qemacs itself)
* [2005-10-28] feature: implement drag&drop of files onto qemacs window
* [2005-10-27] bug: text under cursor should be visible
* [2005-10-26] bug: refresh screen on WM_ACTIVATE
* [2005-10-26] feature: implement mouse handling for win (QE_BUTTON_PRESS_EVENT, QE_BUTTON_RELEASE_EVENT, QE_MOTION_EVENT)
* [2005-10-26] feature: Visual Studio project file
* [2005-10-26] bug: remove unneded font stuff
* [2005-10-26] fixed makefile
